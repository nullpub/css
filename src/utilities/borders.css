:root {
  --border-size-base: var(--size-base);
  --border-size-0: calc(var(--border-size-base) * 0);
  --border-size-1: calc(var(--border-size-base) * 1);
  --border-size-2: calc(var(--border-size-base) * 2);
  --border-size-3: calc(var(--border-size-base) * 4);
  --border-size-4: calc(var(--border-size-base) * 8);
  --border-size-5: calc(var(--border-size-base) * 16);
  --border-size-6: calc(var(--border-size-base) * 32);
  --border-size-7: calc(var(--border-size-base) * 64);
}

:root {
  --border-radius-circle: 50%;
  --border-radius-base: 0.25rem;
  --border-radius-0: calc(var(--border-radius-base) * 0);
  --border-radius-1: calc(var(--border-radius-base) * 1);
  --border-radius-2: calc(var(--border-radius-base) * 2);
  --border-radius-3: calc(var(--border-radius-base) * 4);
}

@for $size from 0 to 7 {
  .bt-$(size),
  .ba-$(size) {
    border-style: solid;
    border-top-width: var(--border-size-$(size));
  }
  .br-$(size),
  .ba-$(size) {
    border-style: solid;
    border-right-width: var(--border-size-$(size));
  }
  .bb-$(size),
  .ba-$(size) {
    border-style: solid;
    border-bottom-width: var(--border-size-$(size));
  }
  .bl-$(size),
  .ba-$(size) {
    border-style: solid;
    border-left-width: var(--border-size-$(size));
  }
}

@each $break, $size in (sm, md, lg), (0, 1, 2, 3, 4, 5, 6, 7) {
  @media (--$(break)) {
    .bt-$(break)-$(size),
    .ba-$(break)-$(size) {
      border-style: solid;
      border-top-width: var(--border-size-$(size));
    }
    .br-$(break)-$(size),
    .ba-$(break)-$(size) {
      border-style: solid;
      border-right-width: var(--border-size-$(size));
    }
    .bb-$(break)-$(size),
    .ba-$(break)-$(size) {
      border-style: solid;
      border-bottom-width: var(--border-size-$(size));
    }
    .bl-$(break)-$(size),
    .ba-$(break)-$(size) {
      border-style: solid;
      border-left-width: var(--border-size-$(size));
    }
  }
}

/**
 * Border Styles
 */
@each $style in (none, hidden, dotted, dashed, solid, double, groove, ridge, inset, outset) {
  .bs-$(style) {
    border-style: $(style);
  }
}

/**
 * Border Colors
 */
@each $color in (base, light, dark, link, primary, secondary, accent, info, warning, error) {
  .bc-$(color),
  .tc-$(color) {
    border-color: var(--color-$(color));
  }
  .bc-$(color)-contrast {
    border-color: var(--color-$(color)-contrast);
  }
}

@each $color in (base, light, dark, link, primary, secondary, accent, info, warning, error) {
  @each $psuedo in (hover, active, focus, required, valid, invalid, read-only) {
    .bc-$(color)-$(psuedo):$(psuedo),
    .tc-$(color)-$(psuedo):$(psuedo) {
      border-color: var(--color-$(color));
    }
  }
}

@each $break in (sm, md, lg) {
  @each $color in (base, light, dark, link, primary, secondary, accent, info, warning, error) {
    @media (--$(break)) {
      .bc-$(break)-$(color),
      .tc-$(break)-$(color) {
        border-color: var(--color-$(color));
      }
      .bc-$(break)-$(color)-contrast {
        border-color: var(--color-$(color)-contrast);
      }
    }
  }
}

/**
 * Border Radius 50% and sized
 */
.ra-c {
  border-radius: var(--border-radius-circle);
}
.rtl-c {
  border-top-left-radius: var(--border-radius-circle);
}
.rtr-c {
  border-top-right-radius: var(--border-radius-circle);
}
.rbl-c {
  border-bottom-left-radius: var(--border-radius-circle);
}
.rbr-c {
  border-bottom-right-radius: var(--border-radius-circle);
}

@for $radius from 0 to 3 {
  .ra-$(radius) {
    border-radius: var(--border-radius-$(radius));
  }
  .rtl-$(radius) {
    border-top-left-radius: var(--border-radius-$(radius));
  }
  .rtr-$(radius) {
    border-top-right-radius: var(--border-radius-$(radius));
  }
  .rbl-$(radius) {
    border-bottom-left-radius: var(--border-radius-$(radius));
  }
  .rbr-$(radius) {
    border-bottom-right-radius: var(--border-radius-$(radius));
  }
}
