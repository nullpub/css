@import '../../variables/breakpoints.css';
@import '../../variables/sizes.css';

@import '../margin/margin-sizes.css';

/**
 * Flex size grow/shrink classes on breakpoint
 */
@each $break in (sm, md, lg) {
  @for $grow from 0 to 5 {
    @for $shrink from 0 to 5 {
      @media (--$(break)) {
        .fls-$(break)-$(grow)-$(shrink) {
          flex-grow: $grow;
          flex-shrink: $shrink;
        }
      }
    }
  }
}

/**
 * Flex basis classes on breakpoint
 */
@each $break in (sm, md, lg) {
  @each $basis in (auto, fill, max-content, min-content, fit-content, content, inherit, initial, unset) {
    @media (--$(break)) {
      .flb-$(break)-$(basis) {
        flex-basis: $(basis);
      }
    }
  }
}

@each $break in (sm, md, lg) {
  @each $basis in (0, 20, 25, 30, 50) {
    @media (--$(break)) {
      .flb-$(break)-$(basis) {
        /* prettier-ignore */
        flex-basis: $(basis)%;
      }
    }
  }
}

/**
 * Flex direction classes on breakpoint
 */
@each $break in (sm, md, lg) {
  @each $direction in (row, column) {
    @media (--$(break)) {
      .fld-$(break)-$(direction) {
        display: flex;
        flex-direction: $direction;
      }
      .fld-$(break)-$(direction)-reverse {
        display: flex;
        flex-direction: $(direction)-reverse;
      }
    }
  }
}

/**
 * Flex direction gaps on breakpoint
 */
@each $break in (sm, md, lg) {
  @for $size from 0 to 7 {
    @media (--$(break)) {
      .fld-$(break)-row.flg-$(size) > *:not(:last-child) {
        margin: 0;
        margin-right: var(--margin-size-$(size));
      }
      .fld-$(break)-column.flg-$(size) > *:not(:last-child) {
        margin: 0;
        margin-bottom: var(--margin-size-$(size));
      }
      .fld-$(break)-row-reverse.flg-$(size) > *:not(:last-child) {
        margin: 0;
        margin-left: var(--margin-size-$(size));
      }
      .fld-$(break)-column-reverse.flg-$(size) > *:not(:last-child) {
        margin: 0;
        margin-top: var(--margin-size-$(size));
      }
    }
  }
}
