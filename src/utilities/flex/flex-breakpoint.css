@import '../../variables/breakpoints.css';
@import '../../variables/sizes.css';

@import '../margin/margin-sizes.css';

@each $break in (sm, md, lg) {
  @media (--$(break)) {
    /**
    * Flex size grow/shrink classes on breakpoint
    */
    @for $grow from 0 to 5 {
      @for $shrink from 0 to 5 {
        .fls-$(break)-$(grow)-$(shrink) {
          flex-grow: $grow;
          flex-shrink: $shrink;
        }
      }
    }

    /**
    * Flex basis classes on breakpoint
    */
    /* prettier-ignore */
    @each $basis in (auto, fill, max-content, min-content, fit-content, content, inherit, initial, unset) {
      .flb-$(break)-$(basis) {
        flex-basis: $(basis);
      }
    }
    /* prettier-ignore */
    @each $basis in (0, 10, 20, 25, 30, 40, 50, 60, 70, 75, 80, 90) {
      .flb-$(break)-$(basis) {
        /* prettier-ignore */
        flex-basis: $(basis)%;
      }
    }

    /**
    * Flex direction classes on breakpoint
    */
    @each $direction in (row, column) {
      .fld-$(break)-$(direction) {
        display: flex;
        flex-direction: $direction;
      }
      .fld-$(break)-$(direction)-reverse {
        display: flex;
        flex-direction: $(direction)-reverse;
      }
    }

    /**
    * Flex direction gaps on breakpoint
    */
    @for $size from 0 to 7 {
      .fld-$(break)-row.flg-$(size) > *:not(:last-child) {
        margin: 0;
        margin-right: var(--margin-size-$(size));
      }
      .fld-$(break)-column.flg-$(size) > *:not(:last-child) {
        margin: 0;
        margin-bottom: var(--margin-size-$(size));
      }
      .fld-$(break)-row-reverse.flg-$(size) > *:not(:last-child) {
        margin: 0;
        margin-left: var(--margin-size-$(size));
      }
      .fld-$(break)-column-reverse.flg-$(size) > *:not(:last-child) {
        margin: 0;
        margin-top: var(--margin-size-$(size));
      }
    }

    /**
    * Flex direction gaps
    */
    @for $size from 0 to 7 {
      .fld-row.flg-$(break)-$(size) > *:not(:last-child) {
        margin-right: var(--margin-size-$(size));
      }
      .fld-column.flg-$(break)-$(size) > *:not(:last-child) {
        margin-bottom: var(--margin-size-$(size));
      }
      .fld-row-reverse.flg-$(break)-$(size) > *:not(:last-child) {
        margin-left: var(--margin-size-$(size));
      }
      .fld-column-reverse.flg-$(break)-$(size) > *:not(:last-child) {
        margin-top: var(--margin-size-$(size));
      }
    }

    /**
    * Flex direction gaps
    */
    @for $size from 0 to 7 {
      .fld-$(break)-row.flg-$(break)-$(size) > *:not(:last-child) {
        margin-right: var(--margin-size-$(size));
      }
      .fld-$(break)-column.flg-$(break)-$(size) > *:not(:last-child) {
        margin-bottom: var(--margin-size-$(size));
      }
      .fld-$(break)-row-reverse.flg-$(break)-$(size) > *:not(:last-child) {
        margin-left: var(--margin-size-$(size));
      }
      .fld-$(break)-column-reverse.flg-$(break)-$(size) > *:not(:last-child) {
        margin-top: var(--margin-size-$(size));
      }
    }

    /**
    * Align items
    */
    /* prettier-ignore */
    @each $align in (stretch, center, flex-start, flex-end, baseline, initial, inherit) {
      .flai-$(break)-$(align) {
        align-items: $(align);
      }
    }

    /**
    * Justify content
    */
    /* prettier-ignore */
    @each $justify in (center, start, end, flex-start, flex-end, left, right, space-between, space-around, space-evenly, stretch, inherit, initial, unset) {
      .fljc-$(break)-$(justify) {
        justify-content: $(justify);
      }
    }

    /**
    * Align self
    */
    /* prettier-ignore */
    @each $align in (auto, normal, stretch, center, start, end, flex-start, flex-end, self-start, self-end, left, right, baseline, inherit, initial, unset) {
      .flas-$(break)-$(align) {
        align-self: $(align);
      }
    }
  }
}
